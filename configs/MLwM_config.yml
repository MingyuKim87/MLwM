miniImageNet:
  # Architecture of Encoder
    # what encoder we use
  encoder_type : 'BBB'
    # what encoder we use
  encoder_type_FC : 'BBB_FC'
    # output_dim_by_encoded (it should be divided to (img_size * img_size]

  # Image Feature
  is_image_feature: False
  encoder_output_dim_image : 400
  encoder_output_dim : 20

  # MAML Body (If FC MAML)
  layer_count: 3
  hidden: 64
    
  # Encode for dataset
  img_size: 84
  input_channel: 3
  filter_size: [32, 48, 64]
  kernel_size: 3
  encoder_type: "BBB"
      
    # 'Beta kl'
  beta_kl : 1.0e-3
    
  # Architecture of Main MAML body
  CONFIG_CONV_4 : [['conv2d', [64, 1, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 2, 2, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 1, 1, 1, 0]],
    ['relu', [True]],
    ['bn', [64]]
  ]

  CONFIG_CONV_4_MAXPOOL : [['conv2d', [32, 3, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
      ['max_pool2d', [2, 2, 0]],
      ['conv2d', [32, 32, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
      ['max_pool2d', [2, 2, 0]],
      ['conv2d', [32, 32, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
      ['max_pool2d', [2, 2, 0]],
      ['conv2d', [32, 32, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
      ['max_pool2d', [2, 1, 0]]
    ]

  CONFIG_CONV_4_MAXPOOL_ENCODED : [['conv2d', [32, 1, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
      ['conv2d', [32, 32, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
      ['conv2d', [32, 32, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
      ['conv2d', [32, 32, 3, 3, 1, 0]],
      ['relu', [True]],
      ['bn', [32]],
    ]

  # inner update step -> update how many gradient steps in inner loop
  # finetuning updata step -> update how many gradient steps during finetuning
  update_step : 5
  update_step_test : 10
  img_size : 84
  
  #hyperparams
  meta_lr : 1.0e-4
  update_lr : 0.01
  is_meta_sgd : True
  layer_count : 1 # For embedded_mini_imagenet


Omniglot:
  # Architecture of Encoder
    # what encoder we use
  encoder_type : 'BBB'
    # output_dim_by_encoded (it should be divided to (img_size * img_size]
      # is_image_feature
  encoder_output_dim_image : 196 
  encoder_output_dim : 20
    # 'Beta kl'
  beta_kl : 1.0e-5

  # Image Feature
  is_image_feature: False

  # MAML Body (If FC MAML)
  layer_count: 3
  hidden: 64
    
  # Encode for dataset
  img_size: 128
  input_channel: 1
  filter_size: [32, 48, 64]
  kernel_size: 3
  encoder_type: "BBB"
  

  # Architecture of Main MAML body
  # 'layer", [ch_out, ch_in, kernel_size, kernel_size, stride, padding]
  CONFIG_CONV_4 : [['conv2d', [64, 1, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 2, 2, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 1, 1, 1, 0]],
    ['relu', [True]],
    ['bn', [64]]
  ]

  CONFIG_CONV_4_MAML : [['conv2d', [64, 1, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 2, 2, 1, 0]],
    ['relu', [True]],
    ['bn', [64]]
  ]

  # inner update step -> update how many gradient steps in inner loop
  # finetuning updata step -> update how many gradient steps during finetuning
  update_step : 5
  update_step_test : 10
  img_size : 28
  
  #hyperparams
  meta_lr : 1.0e-4
  update_lr : 0.01
  is_meta_sgd : True

Pose_regression:
  # Architecture of Encoder
    # what encoder we use
  encoder_type : 'deterministic'
    # output_dim_by_encoded (it should be divided to (img_size * img_size]
      # is_image_feature
  encoder_output_dim_image : 196 
  encoder_output_dim : 20

  # Encoder max pool
  encoder_maxpool_count: 1
    
  # Is Beta KL
  is_kl_loss: True
    
    # 'Beta kl'
  beta_kl : 1.0e-3
    # Encode for dataset
  img_size: 128
  input_channel: 1
  filter_size: [32, 48, 64]
  kernel_size: 3
  
  # Architecture of Main MAML body
  CONFIG_CONV_4 : [['conv2d', [64, 1, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 2, 2, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 1, 1, 1, 0]],
    ['relu', [True]],
    ['bn', [64]]
  ]

  # Architecture of Main MAML body
  CONFIG_CONV_4_MAML : [['conv2d', [64, 1, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 2, 0]],
    ['relu', [True]],
    ['bn', [64]],
    ['conv2d', [64, 64, 3, 3, 1, 0]],
    ['relu', [True]],
    ['bn', [64]]
  ]

  # inner update step -> update how many gradient steps in inner loop
  # finetuning updata step -> update how many gradient steps during finetuning
  update_step : 5
  update_step_test : 20
  img_size : 128
  
  #hyperparams
  meta_lr : 1.0e-4
  update_lr : 1.0e-4
  is_meta_sgd : True

  # Image Feature
  is_image_feature: False

  # MAML Body (If FC layer)
  layer_count: 3
  hidden: 64






